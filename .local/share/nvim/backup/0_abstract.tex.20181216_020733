世の中の多くのアプリケーションは、複数のサービスが組み合わせられることによって構成される。
例えば、アカウント認証サービスは、アカウント情報を保持するデータベースや、アカウントと紐づけて提供されるサービスと組み合わせて初めて意味をなす。
したがってサービスには他のサービスとの組み合わせが可能であることが求められ、他のサービスとの組み合わせが可能なサービスは、理にかなった正当性のあるサービスであると言うことができる。
サービスの正当性の指針の一つとして、制御可能性がある。あるサービスが制御可能であるとは、別のサービスが存在し、それら２つを組み合わせたサービスが、常に望まれる状態に到達可能であることを言う。
一般に制御可能なサービスには、自身と組み合わせるとデッドロックフリーなサービスとなるようなパートナーサービスが存在する。

本研究では、ペトリネットで記述されたサービスについて、パートナーサービスをプログラム合成によって生成することで、ペトリネットの表すサービスの制御可能性を検証することを提案する。
すなわち、あるペトリネットに対して、組み合わせるとデッドロックフリーとなるような別のペトリネットを合成することが可能であるならば、そのペトリネットは制御可能であるということがいえる。
合成は、雛形としてパートナーサービスを表すペトリネットのスケッチを与え、満たすべき仕様として、無デッドロック性を与える。
プログラム合成は、ソルバー支援言語Rosette上でペトリネットの定義言語を構築することで実現できると考えた。
また無デッドロック性の検証のための関数をRosette上に実装した。

